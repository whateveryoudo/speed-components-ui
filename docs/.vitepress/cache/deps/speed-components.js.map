{
  "version": 3,
  "sources": ["../../../../src/components/index.ts", "../../../../src/components/IconFont/index.tsx", "../../../../src/utils/base.ts", "../../../../src/hooks/useCustomUpload.ts", "../../../../src/hooks/useAntdCssVars.ts", "../../../../src/directives/vFocus.ts", "../../../../src/directives/vCopy.ts", "../../../../src/directives/vView.ts", "../../../../src/directives/vLinkTransform.ts", "../../../../src/directives/vSelect.ts"],
  "sourcesContent": ["/*\r\n * @Author: ykx\r\n * @Date: 2023-02-06 18:06:47\r\n * @LastEditTime: 2024-03-19 11:39:25\r\n * @LastEditors: Anxure\r\n * @Description:\r\n */\r\nimport type { App, Component } from \"vue\";\r\nimport { computed, ref } from \"vue\";\r\nimport FullModal from \"./FullModal/index.vue\";\r\nimport CollapseHz from \"./CollapseHz/index.vue\";\r\nimport FilePreviewItem from \"./FilePreviewItem/index.vue\";\r\nimport IconFont from \"./IconFont/index\";\r\nimport KeyMapTip from \"./KeyMapTip/index.vue\";\r\nimport LazySelect from \"./LazySelect/index.vue\";\r\nimport SimpleTable from \"./SimpleTable/index.vue\";\r\nimport RangeNum from \"./RangeNum/index.vue\";\r\nimport TextMore from \"./TextMore/index.vue\";\r\nimport TagGroupSelect from \"./TagGroupSelect/index.vue\";\r\nimport QueryFilter from \"./QueryFilter/index.vue\";\r\nimport QuestionTip from \"./QuestionTip/index.vue\";\r\nimport ApiSelect from \"./ApiSelect/index.vue\";\r\nimport ToggleInput from \"./ToggleInput/index.vue\";\r\nimport ContentEditor from \"./ContentEditor/index.vue\";\r\nimport CustomUpload from './CustomUpload/index.vue'\r\nimport { useAntdCssVars } from \"../hooks\";\r\nimport { vFocus, vCopy, vView, vSelect, vLinkTransform } from \"../directives\";\r\nimport type { RequestResponse } from \"..\";\r\n// 组件列表\r\nconst components: Component[] = [\r\n  FullModal,\r\n  CollapseHz,\r\n  FilePreviewItem,\r\n  IconFont,\r\n  KeyMapTip,\r\n  LazySelect,\r\n  SimpleTable,\r\n  RangeNum,\r\n  TextMore,\r\n  TagGroupSelect,\r\n  QueryFilter,\r\n  ApiSelect,\r\n  ToggleInput,\r\n  ContentEditor,\r\n  QuestionTip,\r\n  CustomUpload,\r\n];\r\n\r\n// AJAX 方法类型\r\ntype AjaxMethod = (params?: any) => Promise<any>;\r\n\r\n// 全局配置类型\r\nexport interface GlobalConfig {\r\n  iconfontUrl?: string;\r\n  registerGlobal?: boolean; // 是否注册为全局组件\r\n  apis?: {\r\n    [key: string]: AjaxMethod;\r\n  };\r\n  // 全局转换请求响应（框架接收响应范式为：RequestResponse，可自行转换,能和后端协商最好）\r\n  transformRequsRes?: (res: any) => RequestResponse<any>;\r\n  // 使用useTable, useLoadMore的 一些配置\r\n  useLoadConfig: {\r\n    pageKey: string; // 全局page参数名，默认 page\r\n    pageSizekey: string; // 全局pageSize参数名 默认  pageSize\r\n  };\r\n}\r\n\r\n// 默认配置\r\nconst defaultConfig: GlobalConfig = {\r\n  registerGlobal: true,\r\n  iconfontUrl: import.meta.env.VITE_ICONFONT_URL,\r\n  apis: {},\r\n  useLoadConfig: {\r\n    pageKey: \"page\",\r\n    pageSizekey: \"size\",\r\n  },\r\n};\r\n\r\n// 使用 ref 创建响应式配置\r\nconst configRef = ref<GlobalConfig>({ ...defaultConfig });\r\n\r\n// 使用 computed 包装配置，确保响应式\r\nconst currentConfig = computed(() => configRef.value);\r\n\r\n// 设置全局配置\r\nexport const setConfig = (config: Partial<GlobalConfig>) => {\r\n  configRef.value = {\r\n    ...configRef.value,\r\n    ...config,\r\n  };\r\n};\r\n\r\nconst install = (app: App, config?: Partial<GlobalConfig>) => {\r\n  // 合并配置\r\n  if (config) {\r\n    setConfig(config);\r\n  }\r\n\r\n  // 注册组件\r\n  if (currentConfig.value.registerGlobal) {\r\n    components.forEach((component) => {\r\n      app.component(component.name as string, component as any);\r\n    });\r\n  }\r\n  // 注入响应式配置\r\n  app.provide(\"speed-components-config\", currentConfig);\r\n\r\n  // 使用 Ant Design Vue CSS 变量\r\n  const cleanup = useAntdCssVars();\r\n  // 注册一些指令\r\n  app.directive(\"focus\", vFocus);\r\n  app.directive(\"copy\", vCopy);\r\n  app.directive(\"view\", vView);\r\n  app.directive(\"select\", vSelect);\r\n  app.directive(\"link-transform\", vLinkTransform);\r\n  // 在应用卸载时清理\r\n  app.unmount = () => {\r\n    cleanup();\r\n    app.unmount();\r\n  };\r\n};\r\n\r\nexport { default as FullModal } from \"./FullModal/index.vue\";\r\nexport { default as CollapseHz } from \"./CollapseHz/index.vue\";\r\nexport { default as FilePreviewItem } from \"./FilePreviewItem/index.vue\";\r\nexport { default as IconFont } from \"./IconFont/index\";\r\nexport { default as KeyMapTip } from \"./KeyMapTip/index.vue\";\r\nexport { default as LazySelect } from \"./LazySelect/index.vue\";\r\nexport { default as SimpleTable } from \"./SimpleTable/index.vue\";\r\nexport { default as RangeNum } from \"./RangeNum/index.vue\";\r\nexport { default as TagGroupSelect } from \"./TagGroupSelect/index.vue\";\r\nexport { default as QueryFilter } from \"./QueryFilter/index.vue\";\r\nexport { default as ApiSelect } from \"./ApiSelect/index.vue\";\r\nexport { default as ToggleInput } from \"./ToggleInput/index.vue\";\r\nexport { default as ContentEditor } from \"./ContentEditor/index.vue\";\r\nexport { default as TextMore } from \"./TextMore/index.vue\";\r\nexport { default as QuestionTip } from \"./QuestionTip/index.vue\";\r\nexport { default as CustomUpload } from './CustomUpload/index.vue'\r\n\r\nexport default {\r\n  install,\r\n  setConfig,\r\n  version: \"0.1.0\",\r\n};\r\n", "/*\r\n * @Author: ykx\r\n * @Date: 2022-05-30 17:13:19\r\n * @LastEditTime: 2024-01-22 14:44:32\r\n * @LastEditors: Anxure\r\n * @Description:支持iconfont & antd图标组件\r\n * @FilePath: \\easycube-apps\\packages\\components\\src\\globalComponents\\IconFont\\index.tsx\r\n */\r\n\r\nimport { type PropType, defineComponent, computed, unref, inject, ref } from 'vue';\r\nimport { createFromIconfontCN } from '@ant-design/icons-vue';\r\nexport default defineComponent({\r\n  name: 'SIconFont',\r\n  props: {\r\n    iconRender: {\r\n      type: Function,\r\n      default: null,\r\n    },\r\n    type: {\r\n      type: String as PropType<string>,\r\n      default: '',\r\n    },\r\n    prefix: {\r\n      type: String,\r\n      default: 'icon-',\r\n    },\r\n    color: {\r\n      type: String,\r\n      default: '',\r\n    },\r\n    size: {\r\n      type: [String, Number] as PropType<string | number>,\r\n      default: 14,\r\n    },\r\n    scriptUrl: {\r\n      type: Array as PropType<string[]>,\r\n      default: () => [],\r\n    },\r\n    imgModule: {\r\n      type: String,\r\n      default: null,\r\n    },\r\n    imgStyle: {\r\n      type: Object,\r\n      default: () => {},\r\n    },\r\n  },\r\n  setup(props, { attrs, }) {\r\n    const config = inject('speed-components-config', ref({\r\n      iconfontUrl: ''\r\n    }));\r\n    let scriptUrls = [config?.value?.iconfontUrl];\r\n    const wrapStyleObj = computed(() => {\r\n      const { size, color } = props;\r\n      const fontSize = typeof size === 'string' ? parseInt(size) : size;\r\n      return {\r\n        fontSize: fontSize + 'px',\r\n        color,\r\n      };\r\n    });\r\n    if (props.iconRender) {\r\n      return () => {\r\n        return (\r\n          <props.iconRender\r\n            style={{ color: props.color, fontSize: props.size + 'px' }}\r\n          />\r\n        );\r\n      };\r\n    }\r\n    // 实例化组件\r\n    let MyIconfontComponent = createFromIconfontCN({\r\n      scriptUrl: scriptUrls,\r\n    });\r\n    if (props.scriptUrl) {\r\n      //整合外界传入的地址\r\n      scriptUrls = [...new Set(scriptUrls.concat(props.scriptUrl))];\r\n      MyIconfontComponent = createFromIconfontCN({\r\n        scriptUrl: scriptUrls,\r\n      });\r\n    }\r\n    return () => {\r\n      const { type, prefix, imgModule, imgStyle } = props;\r\n      return imgModule ? (\r\n        <img\r\n          style={{ ...unref(imgStyle), ...(attrs.style as any) }}\r\n          src={imgModule}\r\n        />\r\n      ) : (\r\n        <MyIconfontComponent\r\n          type={type.startsWith(prefix) ? type : prefix + type}\r\n          {...attrs}\r\n          style={{ ...unref(wrapStyleObj), ...(attrs.style as any) }}\r\n        />\r\n      );\r\n    };\r\n  },\r\n});\r\n", "/*\n * @Author: Anxure\n * @Desc: 工具函数类\n * @Date: 2022-07-07 14:55:43\n * @LastEditors: Anxure\n * @LastEditTime: 2024-05-10 09:59:06\n */\nimport type { Schema } from '@/types';\nimport dayjs from 'dayjs';\nimport customParseFormat from 'dayjs/plugin/customParseFormat';\nimport 'dayjs/locale/zh-cn';\ndayjs.extend(customParseFormat);\n\nimport { cloneDeep } from 'lodash-es';\ninterface ParsedUrlQuery {\n  [key: string]: string | string[];\n}\n// 获取随机数\nexport function getRandomId() {\n  return Number(Math.random().toString().substr(3, 4) + Date.now()).toString(36);\n}\n// 随机带有字母数字的数\nexport const generateRandomString = (length = 4) => {\n  if (length < 2) {\n    throw new Error('传入长度最小为两位');\n  }\n  const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\n  const numbers = '0123456789';\n\n  // 随机选择一个字母和一个数字\n  const letter = characters.charAt(Math.floor(Math.random() * characters.length));\n  const number = numbers.charAt(Math.floor(Math.random() * numbers.length));\n\n  // 剩余的位置随机填充数字或字母\n  const remainingChars = characters + numbers;\n  let result = [letter, number];\n\n  for (let i = 0; i < length - 2; i++) {\n    result.push(remainingChars.charAt(Math.floor(Math.random() * remainingChars.length)));\n  }\n\n  // 打乱数组顺序以确保随机性\n  result = result.sort(() => Math.random() - 0.5);\n\n  return result.join('');\n};\n\n// 获取本地文件\nexport const getSourceUrl = (name: string) => {\n  return new URL(name, import.meta.url).href;\n};\nexport const getSrcUrl = (name: string) => {\n  return new URL(`/src/assets/image/${name}`, import.meta.url).href;\n};\nexport const evalFunc = (fn: string, args?: any) => {\n  try {\n    const Fun = Function; // 一个变量指向Function，防止有些前端编译工具报错\n    return args && args.length > 0 ? new Fun(...args, fn) : new Fun(fn);\n  } catch (e) {\n    console.log(e);\n    return null;\n  }\n};\n// 判断数字是否为空，这里会过滤0,参数请传入数字\nexport const isNumEmpty = (num?: number): num is undefined => {\n  return num === undefined || num === null;\n};\n// 这里存入全量数据\nexport function flattenTreeDataClosure(data: Schema[]) {\n  const treeData = cloneDeep(data);\n  const flattenData: {\n    name: string;\n    id: string;\n    parentKey: string;\n    type: string;\n  }[] = [];\n  function flattenTree(data: Schema[], parentKey: string) {\n    data.forEach((ele) => {\n      const { id, children } = ele;\n      flattenData.push({\n        parentKey,\n        name: ele?.name ?? '',\n        id: ele.id,\n        type: ele.id,\n      });\n      if (children) {\n        flattenTree(children, id);\n      }\n    });\n  }\n  flattenTree(treeData, '');\n  return flattenData;\n}\n// 3.给个节点0-0-1-0，找到ta所有的父级节点\nexport function findParent(item: string, flattenTree: any) {\n  const parentArr: Schema[] = []; // 存储所有的父级元素\n  function find(item: string, flattenTree: any) {\n    flattenTree.forEach((ele: any) => {\n      if (ele.id === item) {\n        parentArr.unshift(ele);\n        find(ele.parentKey, flattenTree);\n      }\n    });\n  }\n  find(item, flattenTree);\n  return parentArr;\n}\n/*\n *@functionName: 查找当前key 在树中的最近父节点\n *@params1: ${String} 唯一键\n *@params2: ${Array} 完整树结构\n *@returns ${String} 父节点key名\n */\nexport const getParentNode = (key: string, tree: Schema[], childrenKey: string): Schema | null => {\n  let parentNode: Schema | null = null;\n  for (let i = 0; i < tree.length; i++) {\n    const node: Record<string, any> = tree[i];\n    if (node[childrenKey]) {\n      if (node[childrenKey].some((item: Schema) => item.id === key)) {\n        parentNode = node as Schema;\n      } else if (getParentNode(key, node[childrenKey], childrenKey)) {\n        parentNode = getParentNode(key, node[childrenKey], childrenKey);\n      }\n    }\n  }\n  return parentNode;\n};\n/*\n *@functionName: 根据指定节点key获取指定节点全量数据\n *@params1: ${String} 唯一键\n *@params2: ${Array} 完整树结构\n */\nexport const getNodeByKey = (key: string, tree: any[], idKey = 'id'): Schema => {\n  let result;\n  for (let i = 0; i < tree.length; i++) {\n    const node = tree[i];\n    if (node[idKey] === key) {\n      result = node;\n    } else {\n      if (node.children && getNodeByKey(key, node.children)) {\n        result = getNodeByKey(key, node.children);\n      }\n    }\n  }\n  return result;\n};\n/** ************end*******************/\n\n\n/** *\n *\n * 获取请求的UUID，指定长度和进制,如\n * getUUID(8, 2)   //\"01001010\" 8 character (base=2)\n * getUUID(8, 10) // \"47473046\" 8 character ID (base=10)\n * getUUID(8, 16) // \"098F4D35\"。 8 character ID (base=16)\n *\n */\nexport function getUUID(len: number, radix?: number) {\n  const chars = '0123456789abcdefghijklmnopqrstuvwxyz'.split('');\n  const uuid = [];\n  let i;\n  radix = radix || chars.length;\n  if (len) {\n    for (i = 0; i < len; i++) uuid[i] = chars[0 | (Math.random() * radix)];\n  } else {\n    let r;\n    uuid[8] = uuid[13] = uuid[18] = uuid[23] = '-';\n    uuid[14] = '4';\n    for (i = 0; i < 36; i++) {\n      if (!uuid[i]) {\n        r = 0 | (Math.random() * 16);\n        uuid[i] = chars[i === 19 ? (r & 0x3) | 0x8 : r];\n      }\n    }\n  }\n  return uuid.join('');\n}\n// 获取html的纯文本\nexport const getPlainTextFromHTML = (html: string) => {\n  // 创建一个临时的DOM容器\n  const tempDiv = document.createElement('div');\n  // 将HTML内容赋值给临时DOM元素\n  tempDiv.innerHTML = html;\n\n  // 使用textContent属性获取纯文本内容，这会忽略所有的HTML标签\n  const plainText = tempDiv.textContent || tempDiv.innerText;\n\n  // 返回纯文本\n  return plainText;\n};\nexport function getAaUUID(len: number, radix: number) {\n  const chars = 'abcdefghijklmnopqrstuvwxyz'.split('');\n  const uuid = [];\n  let i;\n  radix = radix || chars.length;\n  if (len) {\n    for (i = 0; i < len; i++) uuid[i] = chars[0 | (Math.random() * radix)];\n  } else {\n    let r;\n    uuid[8] = uuid[13] = uuid[18] = uuid[23] = '-';\n    uuid[14] = '4';\n    for (i = 0; i < 36; i++) {\n      if (!uuid[i]) {\n        r = 0 | (Math.random() * 16);\n        uuid[i] = chars[i === 19 ? (r & 0x3) | 0x8 : r];\n      }\n    }\n  }\n  return uuid.join('');\n}\n\n// 将一维数组转化为tree\nexport const formatToTree = (\n  arr: { id: string; parentId: string; children: any[]; [key: string]: any }[],\n  pid: string,\n  pidName = 'parentId',\n) => {\n  return arr\n    .filter((item) => item[pidName] === pid)\n    .map((item) => {\n      // 通过父节点ID查询所有子节点\n      item.children = [...formatToTree(arr, item.id)];\n      return item;\n    });\n};\n\n// 将tree展开为一维数组\nexport const treeToList = (\n  tree: { id: string; children?: any[]; [key: string]: any }[],\n  childName = 'children',\n) => {\n  // 设置临时数组，用来存放队列\n  let queen = [] as any[];\n  // 设置输出数组，用来存放要输出的一维数组\n  const result = [];\n  queen = queen.concat(tree);\n  // 对树对象进行广度优先的遍历\n  while (queen.length) {\n    const first = queen.shift();\n    if (first[childName]) {\n      queen = queen.concat(first[childName]);\n      first[childName] = [];\n    }\n    result.unshift(first);\n  }\n  return result;\n};\nexport function flattenTreeDFS(tree: any) {\n  const result: any[] = [];\n  function dfs(node: any[]) {\n    for (let i = 0; i < node.length; i++) {\n      result.push({ ...node[i], children: [] });\n      if (node[i].children && node[i].children.length > 0) {\n        dfs(node[i].children);\n      }\n    }\n  }\n\n  dfs(tree);\n  return result;\n}\n\nexport const getMenuId = (): string => {\n  const time = new Date().getTime();\n  const random = Math.floor(Math.random() * 100000);\n  return time + random + '';\n};\n\n// 判断是否是表达式\nexport const isExpress = (val: any) => {\n  return val && val instanceof Object && val.type === 'express';\n};\n\n// 交换两个元素的位置\nexport const swapArr = (arr: any[], index1: number, index2: number) => {\n  arr[index1] = arr.splice(index2, 1, arr[index1])[0];\n  return arr;\n};\n\n// 中文日期转换 2020年10月01日 => 2020-10-01, 不包含则不处理， 修改为dayjs处理(目前支持：YYYY年MM月DD日, YYYY年MM月DD日 HH时mm分ss秒, HH时mm分ss秒)\nexport const parseStr2Date = (dateStr?: string) => {\n  if (!dateStr) {\n    return undefined;\n  }\n  // 检查是否包含时分秒信息\n  const tempDate = dayjs(\n    dateStr,\n    [\n      'YYYY-MM-DD',\n      'YYYY-MM-DD HH:mm:ss',\n      'HH:mm:ss',\n      'YYYY年MM月DD日',\n      'YYYY年MM月DD日 HH时mm分ss秒',\n      'HH时mm分ss秒',\n    ],\n    'zh-cn',\n  );\n  // 这里仅校验 HH时mm分ss秒, HH:mm:ss\n  const timePattern =\n    /^(?:([01]\\d|2[0-3])时)?([0-5]\\d)分([0-5]\\d)秒|(?:([01]\\d|2[0-3]):([0-5]\\d):([0-5]\\d))$/;\n  const onlyTime = timePattern.test(dateStr);\n\n  const hasTimeInfo = tempDate.hour() !== 0 || tempDate.minute() !== 0 || tempDate.second() !== 0;\n  return tempDate.format(\n    onlyTime ? 'HH:mm:ss' : hasTimeInfo ? 'YYYY-MM-DD HH:mm:ss' : 'YYYY-MM-DD',\n  );\n};\n\nexport const encodeUrlParams = (params: ParsedUrlQuery): string => {\n  return Object.keys(params)\n    .map((key) => {\n      const value = params[key];\n      if (Array.isArray(value)) {\n        return value.map((v) => `${encodeURIComponent(key)}=${encodeURIComponent(v)}`).join('&');\n      }\n      return `${encodeURIComponent(key)}=${encodeURIComponent(value)}`;\n    })\n    .join('&');\n};\n// 驼峰 => 横向连接\nexport const hump2line = (str: string) => {\n  let tuo = '';\n  const arr = str.split('');\n  const newArr = arr.map((ite: string) => {\n    return ite.toUpperCase() === ite ? (ite = '-' + ite.toLowerCase()) : ite;\n  });\n  tuo = newArr.join('');\n  return tuo;\n};\n\nexport function downloadBase64Img(base64String: string, fileName: string) {\n  // 创建一个虚拟的链接元素\n  const a = document.createElement('a');\n  a.href = base64String;\n  a.download = fileName;\n\n  // 模拟点击事件来触发下载\n  document.body.appendChild(a);\n  a.click();\n\n  // 清理\n  document.body.removeChild(a);\n}\n\nexport function formatTime(\n  time: number | string | Date = new Date(),\n  type = 'YYYY-MM-DD HH:mm:ss',\n) {\n  const date = new Date(time);\n  return time ? dayjs(date).format(type) : '';\n}\n/**\n * 格式化文件大小\n * @param bytes\n * @returns\n */\nexport function formatFileSize(bytes: number) {\n  if (bytes === 0) return '0 B';\n  const k = 1024;\n  const sizes = ['B', 'KB', 'MB', 'GB', 'TB'];\n\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n\n  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n}\nexport const checkAgent = () => {\n  // 获取用户代理字符串\n  const userAgent = navigator.userAgent;\n  // 创建正则表达式匹配关键词\n  const mobileKeywords = ['Android', 'iPhone', 'iPad', 'Windows Phone', 'Mobile'];\n\n  // 判断是否为移动端设备\n  const isMobile = mobileKeywords.some(function (keyword) {\n    return userAgent.indexOf(keyword) !== -1;\n  });\n  return isMobile;\n};\n", "// 自定义上传\nimport type { UploadProps } from \"ant-design-vue\";\nimport { ref, type Ref, type ComputedRef, inject, computed } from \"vue\";\nimport { message } from \"ant-design-vue\";\nimport { getRandomId } from \"@/utils\";\nimport { handleExceptDown } from \"@/hooks/useDownload\";\nimport Viewer from \"viewerjs\";\nimport \"viewerjs/dist/viewer.css\";\nexport type IFileItem = {\n  id: string;\n  previewUrl?: string;\n  fileName: string;\n  fileType: string;\n  fileSize?: string | number;\n  status?: 'done' | 'error' | 'uploading';\n  className?: string;\n};\ntype IUploadOption = {\n  maxCount?: number;\n  maxSize?: number;\n  name?: string; // 上传文件的key名\n  acceptTypes?: string[];\n  // 一些外部传入的api接口\n  apis?: {\n    fileUpload: (formData: FormData) => Promise<any>;\n    fileDel?: (fieldId: string) => Promise<any>;\n    fileDownload?: (fieldId: string) => Promise<any>;\n    getPreviewUrl?: (fieldId: string) => string;\n  };\n  data?: Record<string, any> | ((file: File) => Record<string, any>); // 上传所需参数或返回上传参数的方法\n  transformResult?: (res: any) => any; // 上传结果转换\n  onPreview?: (fileId: string) => void; // 预览文件的操作\n  afterUpload?: (files: any[]) => void; // 上传完成后执行得操作\n  afterDelete?: (files: any[]) => void; // 删除完成后执行得操作\n};\ntype NewFileListType = Exclude<UploadProps[\"fileList\"], undefined>;\nexport function useCustomUpload(\n  outOptions?: Ref<IUploadOption> | ComputedRef<IUploadOption>\n) {\n  const files = ref<any[]>([]); // 上传文件列表\n  const uploadLoading = ref(false);\n  const speedComsConfig = inject(\"speed-components-config\", ref({ apis: {} }));\n  const options = computed<IUploadOption>(() => {\n    if (outOptions === undefined) {\n      return speedComsConfig.value?.apis ? { apis: speedComsConfig.value?.apis } : {}; // 如果没有外部传入，则使用默认配置\n    }\n    return speedComsConfig.value?.apis\n      ? { apis: speedComsConfig.value?.apis, ...outOptions.value }\n      : outOptions.value; // 整合apis选项\n\n  });\n  const beforeUpload = (\n    file: NewFileListType[number],\n    outFiles?: UploadProps[\"fileList\"]\n  ) => {\n    const fileList = outFiles || files.value;\n    if (!options.value) {\n      return true;\n    }\n    let hasOverLimit = false,\n      validType = true,\n      isLt = true;\n    if (options.value.maxCount) {\n      hasOverLimit =\n        files.value.length + (fileList || [])?.length > options.value.maxCount;\n      if (hasOverLimit) {\n        message.warning(`已超过最大上传数${options.value.maxCount}`);\n        return false;\n      }\n    }\n    if (options.value.maxSize && file.size) {\n      isLt = file.size / 1024 / 1024 < options.value.maxSize;\n      if (!isLt) {\n        message.warning(`单个文件最大为${options.value.maxSize}M`);\n      }\n    }\n    // 校验格式，目前仅通过文件名后缀处理\n    if (options.value.acceptTypes && options.value.acceptTypes.length > 0) {\n      const rge = /\\.\\w+$/;\n      const fileSuffix = file.name.match(rge)?.[0] ?? \"\";\n      if (!options.value.acceptTypes.includes(fileSuffix)) {\n        message.warning(\n          `请上传${options.value.acceptTypes.join(\"、\")}格式的文件`\n        );\n        validType = false;\n      }\n    }\n\n    return isLt && validType;\n  };\n  const customRequest = async (option: any) => {\n    // 用不上回调，这里是自己写的渲染\n    if (!options?.value?.apis?.fileUpload) {\n      console.warn(\"未配置上传接口\");\n      return;\n    }\n    let formData = new FormData();\n    const { file } = option;\n    // 确保file是数组\n    const fileList = Array.isArray(file) ? file : [file];\n\n    // 添加所有文件\n    fileList.forEach((f: File) => {\n      formData.append(options.value.name || \"files[]\", f);\n    });\n\n    if (options.value?.data) {\n      if (\n        !(\n          typeof options.value.data === \"function\" ||\n          typeof options.value.data === \"object\"\n        )\n      ) {\n        console.warn(\"data类型错误,请传入object或function\");\n        return;\n      }\n      if (typeof options.value.data === \"object\") {\n        const data = options.value.data as Record<string, any>;\n        Object.keys(data).forEach((key) => {\n          formData.append(key, data[key]);\n        });\n      } else {\n        const customData = (options.value.data as (file: File[]) => FormData)(fileList);\n        // 合并自定义FormData\n        Array.from(customData.entries()).forEach(([key, value]) => {\n          formData.append(key, value);\n        });\n      }\n    }\n\n    console.log(\"formData-imgUpload=\", formData);\n    uploadLoading.value = true;\n\n    // 为每个文件创建一个uid\n    const uids = fileList.map(() => getRandomId());\n\n    // 添加所有文件到列表，状态为uploading\n    const filesToAdd = fileList.map((f, index) => ({\n      uid: uids[index],\n      fileName: f.name,\n      status: \"uploading\",\n    }));\n\n    files.value.push(...filesToAdd);\n\n    try {\n      const res = await options.value.apis.fileUpload(formData);\n      uploadLoading.value = false;\n      if (res.success) {\n        const filterData = res.data.map((item: any) => {\n          if (\n            options?.value?.transformResult &&\n            typeof options.value.transformResult === \"function\"\n          ) {\n            return options.value.transformResult(item);\n          }\n          return {\n            id: item.id,\n            fileType: item.fileType,\n            fileSize: item.fileSize,\n            fileName: item.fileName,\n          };\n        });\n\n        // 更新所有文件状态\n        filterData.forEach((item: any, index: number) => {\n          const targetIndex = files.value.findIndex(\n            (f: any) => f.uid === uids[index]\n          );\n          if (targetIndex !== -1) {\n            files.value[targetIndex] = { ...item, status: 'done' };\n          }\n        });\n\n        // 调用成功回调\n        option.afterUpload?.();\n      } else {\n        // 更新所有文件状态为错误\n        uids.forEach((uid) => {\n          const targetIndex = files.value.findIndex(\n            (item: any) => item.uid === uid\n          );\n          if (targetIndex !== -1) {\n            files.value[targetIndex].status = \"error\";\n          }\n        });\n      }\n\n      if (\n        options?.value?.afterUpload &&\n        typeof options.value.afterUpload === \"function\"\n      ) {\n        options.value.afterUpload(files.value);\n      }\n    } catch (error) {\n      uploadLoading.value = false;\n      // 更新所有文件状态为错误\n      uids.forEach((uid) => {\n        const targetIndex = files.value.findIndex(\n          (item: any) => item.uid === uid\n        );\n        if (targetIndex !== -1) {\n          files.value[targetIndex].status = \"error\";\n        }\n      });\n    }\n  };\n  const viewerInstance = ref();\n  // 图片/附件删除\n  const handleDelFile = async (file: IFileItem) => {\n    const id = file.id;\n    if (!options?.value?.apis) {\n      console.warn(\"未配置删除接口\");\n      // 仅更新files\n      const delIndex = files.value.findIndex((item: any) => item.id === id);\n      files.value.splice(delIndex, 1);\n      if (\n        options?.value?.afterDelete &&\n        typeof options.value.afterDelete === \"function\"\n      ) {\n        options.value.afterDelete(files.value);\n      }\n      return;\n    }\n    uploadLoading.value = true;\n    const res = await options.value.apis.fileDel?.(id);\n    uploadLoading.value = false;\n    if (res && res.success) {\n      const delIndex = files.value.findIndex((item: any) => item.id === id);\n      files.value.splice(delIndex, 1);\n      if (\n        options?.value?.afterDelete &&\n        typeof options.value.afterDelete === \"function\"\n      ) {\n        options.value.afterDelete(files.value);\n      }\n    }\n  };\n  // 图片/附件预览\n  const handlePreviewFile = async (file: IFileItem) => {\n    if (!file.fileName) {\n      throw new Error(\"缺少必要属性fileName\");\n    }\n    const getPreviewUrl = options.value?.apis?.getPreviewUrl;\n    const rge = /\\.\\w+$/;\n    const fileSuffix = file.fileName.match(rge)?.[0] ?? \"\";\n    if (fileSuffix) {\n      // 图片走插件预览(如何禁止img点击触发？？)\n      if ([\".png\", \".jpg\", \".gif\", \".jpeg\"].includes(fileSuffix)) {\n        if (viewerInstance.value) {\n          viewerInstance.value.view(0);\n        } else {\n          let img = null;\n          if (document.getElementById('viewer-img')) {\n            // 如果已经存在，则直接显示\n            img = document.getElementById('viewer-img');\n          } else {\n            // 创建新的 img 元素\n            img = document.createElement('img');\n            img.id = 'viewer-img';\n            img.style.display = 'none'; // 隐藏元素\n          }\n          if (img) {\n            (img as HTMLImageElement).src = (getPreviewUrl ? getPreviewUrl(file.id) : file.previewUrl) || '';\n            viewerInstance.value = new Viewer(img, {\n              className: file.className,\n              // 内联展示\n              inline: false,\n            });\n            viewerInstance.value.view(0);\n          }\n\n        }\n      } else {\n        if (options.value.onPreview || typeof options.value.onPreview === \"function\") {\n          options.value.onPreview(file.id);\n        } else {\n          window.open(file.previewUrl);\n        }\n      }\n    } else {\n      if (options.value.onPreview || typeof options.value.onPreview === \"function\") {\n        options.value.onPreview(file.id);\n      } else {\n        window.open(file.previewUrl);\n      }\n    }\n  }\n  // 图片/附件下载\n  const handleDownloadFile = async (file: IFileItem) => {\n    const fileDownload = options.value?.apis?.fileDownload;\n    if (!fileDownload || typeof fileDownload !== \"function\") {\n      throw new Error(\"文件下载方法缺失或传入的fileDownload不正确\");\n    }\n    const res = (await fileDownload(file.id));\n    handleExceptDown(res, file.fileName, file?.className);\n  }\n  return {\n    beforeUpload,\n    customRequest,\n    handleDelFile,\n    handleDownloadFile,\n    handlePreviewFile,\n    uploadLoading,\n    files,\n  };\n}\n", "import { theme } from 'ant-design-vue';\n\nconst { defaultAlgorithm, defaultSeed } = theme;\n\n/**\n * 将驼峰命名转换为 kebab-case\n * @param str 驼峰命名的字符串\n * @returns kebab-case 格式的字符串\n */\nconst camelToKebab = (str: string): string => {\n  return str.replace(/([a-z0-9])([A-Z])/g, '$1-$2').toLowerCase();\n};\n\n/**\n * 生成 Ant Design Vue 的 CSS 变量\n * @returns {() => void} 清理函数\n */\nexport const useAntdCssVars = () => {\n  // 使用 defaultAlgorithm 和 defaultSeed 获取 token\n  const token = defaultAlgorithm(defaultSeed);\n\n  // 生成 CSS 变量内容\n  const generateCssVars = () => {\n    const cssVars: string[] = [];\n    \n    // 遍历 token 对象，生成 CSS 变量\n    Object.entries(token).forEach(([key, value]) => {\n      if (typeof value === 'string' || typeof value === 'number') {\n        // 将驼峰命名转换为 kebab-case\n        const kebabKey = camelToKebab(key);\n        cssVars.push(`--ant-${kebabKey}: ${value};`);\n      }\n    });\n\n    return `:root {\\n  ${cssVars.join('\\n  ')}\\n}`;\n  };\n\n  // 在客户端环境下才执行 DOM 操作\n  if (typeof window !== 'undefined') {\n    // 创建并插入 style 标签\n    const style = document.createElement('style');\n    style.id = 'antd-css-vars';\n    style.textContent = generateCssVars();\n    document.head.appendChild(style);\n\n    // 返回清理函数\n    return () => {\n      const style = document.getElementById('antd-css-vars');\n      if (style) {\n        document.head.removeChild(style);\n      }\n    };\n  }\n\n  // 在服务端环境下返回空函数\n  return () => {};\n}; ", "export const vFocus = {\r\n  mounted(el?: HTMLElement) {\r\n    if (el?.tagName !== 'INPUT') {\r\n      el?.querySelector('input')?.focus()\r\n      return\r\n    }\r\n\r\n    el?.focus()\r\n  },\r\n}", "import { message } from 'ant-design-vue'\r\nexport const vCopy = {\r\n  mounted(el?: HTMLElement, binding?: any) {\r\n    if (el) {\r\n      el.addEventListener('click', () => {\r\n        // 首先去找 v-bind=\"值\", 如果没有值，则那 innerText 充当\r\n        const text = binding.arg || binding.value || el.innerText || ''\r\n        console.log(text);\r\n        // 一个兼容性不好的 API\r\n        if (navigator.clipboard) {\r\n          // clipboard api 复制\r\n          navigator.clipboard.writeText(text)\r\n          message.success('复制成功')\r\n        }\r\n\r\n        // 通用做法\r\n        else {\r\n          const textarea = document.createElement('textarea')\r\n\r\n          // Chrome 中不要这句也可以，但 FireFox 不行\r\n          document.body.appendChild(textarea)\r\n\r\n          // 隐藏输入框\r\n          textarea.style.position = 'fixed'\r\n          textarea.style.width = '0'\r\n          textarea.style.height = '0'\r\n          textarea.style.top = '10px'\r\n\r\n          // 赋值\r\n          textarea.value = text\r\n\r\n          // 选中\r\n          textarea.select()\r\n\r\n          // 复制\r\n          document.execCommand('copy', true)\r\n          \r\n          message.success('复制成功');\r\n          // 移除输入框\r\n          document.body.removeChild(textarea)\r\n        }\r\n      })\r\n    }\r\n  },\r\n}", "import 'viewerjs/dist/viewer.css';\r\nimport Viewer from 'viewerjs';\r\n\r\nexport const vView = {\r\n  mounted(el?: HTMLImageElement) {\r\n    if (el) {\r\n      el.style.cursor = 'zoom-in';\r\n\r\n      // 构造 viewer 实例\r\n      const viewer = new Viewer(el, {\r\n        // 内联展示\r\n        inline: false,\r\n\r\n        // 全屏预览时的缩放比例\r\n        viewed() {\r\n          viewer.zoomTo(0.8);\r\n        },\r\n        // 追加url处理（新版静态资源预览需要携带accessKey(公开地址),token(内部地址)）,未变化的地址也会重新再发送一遍请求？？\r\n        url(image: any) {\r\n          // console.log(image);\r\n          return image.src; // 图片路径\r\n        },\r\n      });\r\n\r\n      // 绑定事件监听\r\n      el.addEventListener('click', () => {\r\n        viewer.play();\r\n      });\r\n    }\r\n  },\r\n};\r\n", "/*\r\n * @Author: Anxure\r\n * @Desc:\r\n * @Date: 2023-04-03 11:38:24\r\n * @LastEditors: ykx\r\n * @LastEditTime: 2024-01-08 17:51:11\r\n */\r\n// 字符串中的链接转成a标签, innerhtml 事件会丢失？？ 这里判断是否是某些内部链接，追加rel=\"opener\" 保留跳转session\r\n\r\nimport DOMPurify from 'dompurify';\r\nexport const vLinkTransform = {\r\n  mounted(el?: HTMLElement, binding?: any) {\r\n    if (el) {\r\n      // URL正则表达式(看不懂，是否覆盖完全？？TODO:url解析库？)\r\n      const urlRegex = /(https?|http|ftp|file):\\/\\/[-A-Za-z0-9+&@#/%?=~_|!:,.;]+[-A-Za-z0-9+&@#/%=~_|]/g\r\n\r\n      const baseInnerhtml = binding?.value ?? '';\r\n      // 替换文本中的URL为<a>标签\r\n      const htmlText = baseInnerhtml.replace(urlRegex, (match: any) => {\r\n        const isSysLink = match.includes('/easycube/preview');\r\n        return `<a href=\"${match}\" target=\"_blank\" ${isSysLink && 'rel=\"opener\"'}>${match}</a>`;\r\n      });\r\n      el.innerHTML = DOMPurify.sanitize(htmlText);\r\n    }\r\n  },\r\n};\r\n", "export const vSelect = {\n  mounted(el?: HTMLInputElement, binding?: any) {\n    const defaultSelect = binding?.value ?? true;\n    if (!defaultSelect) {\n      return;\n    }\n    if (el?.tagName !== 'INPUT') {\n      el?.querySelector('input')?.focus();\n      el?.querySelector('input')?.select();\n      return;\n    }\n\n    el?.focus();\n    el?.select();\n  },\n};\n"],
  "mappings": "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",
  "names": ["dayjs", "customParseFormat", "style", "default"]
}
